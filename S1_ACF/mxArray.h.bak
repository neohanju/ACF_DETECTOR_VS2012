
#define NOMINMAX
#include "stdafx.h"

#include <iostream>
#include <vector>

using namespace std;

// Type definitions
typedef enum
{
	mxUNKNOWN_CLASS = 0,
	mxCELL_CLASS,
	mxSTRUCT_CLASS,
	mxLOGICAL_CLASS,
	mxCHAR_CLASS,
	mxVOID_CLASS,
	mxDOUBLE_CLASS,
	mxSINGLE_CLASS,
	mxINT8_CLASS,
	mxUINT8_CLASS,
	mxINT16_CLASS,
	mxUINT16_CLASS,
	mxINT32_CLASS,
	mxUINT32_CLASS,
	mxINT64_CLASS,
	mxUINT64_CLASS,
	mxFUNCTION_CLASS,
	mxOPAQUE_CLASS,
	mxOBJECT_CLASS, /* keep the last real item in the list */
#if defined(_LP64) || defined(_WIN64)
	mxINDEX_CLASS = mxUINT64_CLASS,
#else
	mxINDEX_CLASS = mxUINT32_CLASS,
#endif
	/* TEMPORARY AND NASTY HACK UNTIL mxSPARSE_CLASS IS COMPLETELY ELIMINATED */
	mxSPARSE_CLASS = mxVOID_CLASS /* OBSOLETE! DO NOT USE */
}
mxClassID;


typedef enum
{
	mxREAL,
	mxCOMPLEX
}
mxComplexity;



//mxArray structure
class mxArray {
public:
	bool bDataAlloc;
	void* data;

	bool bIsMats;
	mxArray* mats[256];
	
	char fieldName[256][1024];
	int nField;
	
	size_t dim[256];
	size_t nDim;
	mxClassID classID;
	mxComplexity complexity;

};


// mxArray get functions
mxArray* mxGetField(mxArray* pa, size_t i, char* fieldname);
size_t *mxGetDimensions(const mxArray *pa);
size_t mxGetNumberOfDimensions(const mxArray *pa);
void *mxGetData(const mxArray *pa);
double mxGetScalar(const mxArray *pa);
void *mxGetPr(const mxArray *pa);
mxClassID mxGetClassID(const mxArray *pa);
int mxGetString(const mxArray *pa, char *buf, size_t buflen);
size_t mxGetNumberOfElements(const mxArray *pa);
size_t mxGetM(const mxArray *pa);
size_t mxGetN(const mxArray *pa);


//mxArray set functions
int mxSetDimensions(mxArray *pa, const size_t *pdims, size_t ndims);
void mxSetData(mxArray *pa, void  *newdata);


//mxArray memory functions
mxArray *mxCreateNumericArray(size_t ndim, const size_t *dims, mxClassID classid, mxComplexity flag);
mxArray *mxCreateString(char *str);
mxArray *mxCreateDoubleScalar(double value);
mxArray *mxCreateNumericMatrix(size_t m, size_t n, mxClassID classid, mxComplexity flag);
void mxDestroyArray(mxArray *pa);
void *mxMalloc(size_t	n);
void *mxCalloc(size_t	n, size_t size);


//MATFile functions
mxArray* jwmatOpen(char *filename);
mxArray* jwmatOpen(FILE* fp);

void mexErrMsgTxt(const char	*error_msg);

void mxFree(void *pa);
//MATFile functions
mxArray* jwmatOpen(char *filename);

bool mxIsDouble(const mxArray *pa);

#ifndef _SSE_HPP_
#define _SSE_HPP_

#include <emmintrin.h> // SSE2:<e*.h>, SSE3:<p*.h>, SSE4:<s*.h>

#define RETf inline __m128
#define RETi inline __m128i

// set, load and store values
RETf SET( const float &x ) { return _mm_set1_ps(x); }
RETf SET( float x, float y, float z, float w ) { return _mm_set_ps(x,y,z,w); }
RETi SET( const int &x ) { return _mm_set1_epi32(x); }
RETf LD( const float &x ) { return _mm_load_ps(&x); }
RETf LDu( const float &x ) { return _mm_loadu_ps(&x); }
RETf STR( float &x, const __m128 y ) { _mm_store_ps(&x,y); return y; }
RETf STR1( float &x, const __m128 y ) { _mm_store_ss(&x,y); return y; }
RETf STRu( float &x, const __m128 y ) { _mm_storeu_ps(&x,y); return y; }
RETf STR( float &x, const float y ) { return STR(x,SET(y)); }

// arithmetic operators
RETi ADD( const __m128i x, const __m128i y ) { return _mm_add_epi32(x,y); }
RETf ADD( const __m128 x, const __m128 y ) { return _mm_add_ps(x,y); }
RETf ADD( const __m128 x, const __m128 y, const __m128 z ) {
  return ADD(ADD(x,y),z); }
RETf ADD( const __m128 a, const __m128 b, const __m128 c, const __m128 &d ) {
  return ADD(ADD(ADD(a,b),c),d); }
RETf SUB( const __m128 x, const __m128 y ) { return _mm_sub_ps(x,y); }
RETf MUL( const __m128 x, const __m128 y ) { return _mm_mul_ps(x,y); }
RETf MUL( const __m128 x, const float y ) { return MUL(x,SET(y)); }
RETf MUL( const float x, const __m128 y ) { return MUL(SET(x),y); }
RETf INC( __m128 &x, const __m128 y ) { return x = ADD(x,y); }
RETf INC( float &x, const __m128 y ) { __m128 t=ADD(LD(x),y); return STR(x,t); }
RETf DEC( __m128 &x, const __m128 y ) { return x = SUB(x,y); }
RETf DEC( float &x, const __m128 y ) { __m128 t=SUB(LD(x),y); return STR(x,t); } 
RETf MIN_( const __m128 x, const __m128 y ) { return _mm_min_ps(x,y); } // modified MIN -> MIN_
RETf RCP( const __m128 x ) { return _mm_rcp_ps(x); }
RETf RCPSQRT( const __m128 x ) { return _mm_rsqrt_ps(x); }

// logical operators
RETf AND( const __m128 x, const __m128 y ) { return _mm_and_ps(x,y); }
RETi AND( const __m128i x, const __m128i y ) { return _mm_and_si128(x,y); }
RETf ANDNOT( const __m128 x, const __m128 y ) { return _mm_andnot_ps(x,y); }
RETf OR( const __m128 x, const __m128 y ) { return _mm_or_ps(x,y); }
RETf XOR( const __m128 x, const __m128 y ) { return _mm_xor_ps(x,y); }

// comparison operators
RETf CMPGT( const __m128 x, const __m128 y ) { return _mm_cmpgt_ps(x,y); }
RETf CMPLT( const __m128 x, const __m128 y ) { return _mm_cmplt_ps(x,y); }
RETi CMPGT( const __m128i x, const __m128i y ) { return _mm_cmpgt_epi32(x,y); }
RETi CMPLT( const __m128i x, const __m128i y ) { return _mm_cmplt_epi32(x,y); }

// conversion operators
RETf CVT( const __m128i x ) { return _mm_cvtepi32_ps(x); }
RETi CVT( const __m128 x ) { return _mm_cvttps_epi32(x); }

#undef RETf
#undef RETi
#endif







