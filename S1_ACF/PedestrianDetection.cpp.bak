#define EXPORT_LIBRARY

#include "stdafx.h"

#include "PedestrianDetection.h"
#include "PedestrianDetectionST.h"

/*
st_fireDetectorParam::st_fireDetectorParam() {

	flameParam[0] = 1.0;	flameParam[1] = 0.6;
	smokeParam[0] = 0.0;	smokeParam[1] = 0.0;
	flameSensitivity = 60;	smokeSensitivity = 60;
	imType = 1;
}
*/

st_pedestrianDetector::st_pedestrianDetector() {
		
	imWidth = 640;
	imHeight = 480;

	param.nSensitivity = 50;
	param.params.bSHOW_WINDOW = 0;
	param.params.nDET_TH = 0; // detection threshold
	param.params.nS1_DETECTION_TYPE = 1; // 0:Head / 1:Full-body / 2: Full-body from Head
	param.params.nS1_DETECTOR_TYPE = 1; // 0:no openmp - acfDetect / 1:openmp - acfDetect /2:TEXT
	param.params.nS1_INPUT_TYPE = 1; // 0:ETRI %d_%04d.jpg / 1:PETS2009 View_%03d\\frame_%04d.jpg / 2:VIDEO / 3: %d_%04d.jpg / others : %d_%d.jpg
	param.imType = 0;

	memset(bDetectionROI,0,sizeof(char)*DETECTION_NUMBER_OF_ROI);

	image = Mat::zeros(imHeight,imWidth, CV_8UC3);

}

st_pedestrianDetector::~st_pedestrianDetector() {

	for(int i=0;i<DETECTION_NUMBER_OF_ROI;++i) {
		if(bDetectionROI[i]==1) {
			//flameROI[i]->~st_roi();
			delete DetectionROI[i];
		}
	}

}

void st_pedestrianDetector::updateDetectionROIMap() {

	vector<Point> ROI_Poly;
	vector<Point> ROI_Vertices;

	DetectionROIMap = Mat::zeros(imHeight,imWidth,CV_8UC1);

	//ROI
	for(int i=0;i<DETECTION_NUMBER_OF_ROI;++i) {
		if(bDetectionROI[i]==1) {
			ROI_Vertices.clear();
			for(int j=0;j<DetectionROI[i]->n;++j) {
				ROI_Vertices.push_back(cvPoint(DetectionROI[i]->pts[j].x, DetectionROI[i]->pts[j].y));
			}
			approxPolyDP(ROI_Vertices,ROI_Poly,1.0,true);
			fillConvexPoly(DetectionROIMap, &ROI_Poly[0], ROI_Poly.size(), 255, 8, 0);
		}
	}
	
}


st_roi::st_roi(int nPts) {
	n = nPts;
	pts = (xy*)malloc(sizeof(xy)*n);
}

st_roi::~st_roi() {
	free(pts);
}


//////////////////////////////////////////////////////////////////////////
//
void* InitPedestrianDetect(int imwidth, int imheight, char* pDBPath, int imageType, void* pParam) {

	char filename[1024];
	FILE* fp;

	st_pedestrianDetector* pengine;

	if (imwidth <= 0 || imheight <= 0)
		return 0;

	pengine = new st_pedestrianDetector;

	pengine->imWidth = imwidth;
	pengine->imHeight = imheight;
	
	pengine->param.imType = imageType;
	if(pParam!=0) {
		memcpy(&(pengine->param), pParam, sizeof(st_pedestrianDetectorParam));
		memcpy(pengine->param.params.pDBPath, pDBPath, sizeof(char)*1024);
	}
	else
	{
		st_pedestrianDetectorParam stparam;
		SetDefaultPedParam(&stparam);
		memcpy(stparam.params.pDBPath, pDBPath, sizeof(char)*1024);
		memcpy(&(pengine->param), &stparam, sizeof(st_pedestrianDetectorParam));
	}

	//initialize the detectors
	pengine->pedestrianDetector.Initialize(pengine->param.params);
		
	//ROI initialization
	pengine->DetectionROIMap = Mat::zeros(pengine->imHeight,pengine->imWidth, CV_8UC1);
	
	//image initialization
	pengine->image = Mat::zeros(pengine->imHeight,pengine->imWidth, CV_8UC3);
	pengine->image2 = Mat::zeros(pengine->imHeight,pengine->imWidth, CV_8UC3);

	return pengine;
}



//////////////////////////////////////////////////////////////////////////
//
int SetDetectPedROI(void* pengine, int ROIID, int nPoints, int* pPositions) {

	//너무 큰 ROI ID
	if (!pengine)
		return ENGINE_PT_NULL;

	if (ROIID < 0)
		return ROI_ID_NEGATIVE;
	
	if (nPoints <= 0)
		return ROI_PTS_NEGATIVE;

	if(ROIID >= DETECTION_NUMBER_OF_ROI)
		return ROI_IDOVER_LIMIT;

	//이미 설정된 ROI
	if(((st_pedestrianDetector*)pengine)->bDetectionROI[ROIID] == 1)
		return ROI_ALREADY_SET;

	((st_pedestrianDetector*)pengine)->DetectionROI[ROIID] = new st_roi(nPoints);
	int* tt = pPositions;
	for(int i=0;i<nPoints;++i) {
		((st_pedestrianDetector*)pengine)->DetectionROI[ROIID]->pts[i].x = *(tt++);
		((st_pedestrianDetector*)pengine)->DetectionROI[ROIID]->pts[i].y = *(tt++);
	}
	((st_pedestrianDetector*)pengine)->bDetectionROI[ROIID] = 1;

	((st_pedestrianDetector*)pengine)->updateDetectionROIMap();

	return NON_OPERATION_ERROR;
}



//////////////////////////////////////////////////////////////////////////
//
int RemoveDetectPedROI(void* pengine, int ROIID) {

	if (!pengine)
		return ENGINE_PT_NULL;

	//너무 큰 ROI ID
	if(ROIID >= DETECTION_NUMBER_OF_ROI)
		return ROI_IDOVER_LIMIT;

	//설정 안 된 ROI
	if(((st_pedestrianDetector*)pengine)->bDetectionROI[ROIID] == 0)
		return ROI_IDNOT_EXIST;

	//((st_fireDetector*)pengine)->flameROI[ROIID]->~st_roi();
	delete ((st_pedestrianDetector*)pengine)->DetectionROI[ROIID];

 	((st_pedestrianDetector*)pengine)->bDetectionROI[ROIID] = 0;

	((st_pedestrianDetector*)pengine)->updateDetectionROIMap();

	return NON_OPERATION_ERROR;

}



//////////////////////////////////////////////////////////////////////////
//
int SetPedSensitivity(void* pengine, int nSensitivity) {

	if (!pengine)
		return ENGINE_PT_NULL;

	((st_pedestrianDetector*)pengine)->param.nSensitivity = nSensitivity;

	return NON_OPERATION_ERROR;

}



//////////////////////////////////////////////////////////////////////////
//
int SetPedSensitivity(void* pengine, int* nSensitivity) {

	if (!pengine)
		return ENGINE_PT_NULL;

	*nSensitivity = ((st_pedestrianDetector*)pengine)->param.nSensitivity;

	return NON_OPERATION_ERROR;

}



//////////////////////////////////////////////////////////////////////////
//
int ClearPedestrianDetect(void** ppengine) {

	//((st_fireDetector*)*ppengine)->~st_fireDetector();
	if (*ppengine)
	{
		((st_pedestrianDetector*)(*ppengine))->pedestrianDetector.Finalize();
		delete ((st_pedestrianDetector*)*ppengine);
		*ppengine = NULL;
		return NON_OPERATION_ERROR;
	}
	else
		return ENGINE_PT_NULL;
}



int SetDefaultPedParam(void* pVoid)
{
	st_pedestrianDetectorParam* pParam;
	pParam = (st_pedestrianDetectorParam*)pVoid;
	if (!pParam)
		return PARAM_PT_NULL;
	pParam->nSensitivity = 15; pParam->params.bSHOW_WINDOW = 1;
	pParam->imType = 1; pParam->params.nS1_DETECTION_TYPE = 1;
	pParam->params.nS1_DETECTOR_TYPE = 1;
	pParam->params.nS1_INPUT_TYPE = 1;
	sprintf_s(pParam->params.pDBPath, "../data/detector/");
	return NON_OPERATION_ERROR;
}

//////////////////////////////////////////////////////////////////////////
//
//최경택 수정 pCandidateGet NULL 부분과 ppDetectionResult의 이중포인터 사용 2015-11-05
int PedestrianDetect(void* pengine, unsigned char* pImage, int nCandidate, int* pCandidateGate, int** ppDetectionResult) 
{
	double heightRatio;
	bool bFlame, bSmoke;
	double modelHeight = 100;
	double w_r, h_r;
	int ndetected = 0;
	*ppDetectionResult = 0;
	
	if (!pengine)
		return ENGINE_PT_NULL;

	if (!pImage)
		return IMAGE_PT_NULL;
	/*
	if (!ppDetectionResult)
		return ALARM_PT_NULL;
	*/
	
	memcpy(((st_pedestrianDetector*)pengine)->image.data, pImage, ((st_pedestrianDetector*)pengine)->imWidth*((st_pedestrianDetector*)pengine)->imHeight*3);

	if(((st_pedestrianDetector*)pengine)->imType == 0)
		cvCvtColor(&IplImage(((st_pedestrianDetector*)pengine)->image2),&IplImage(((st_pedestrianDetector*)pengine)->image2),CV_RGB2BGR);
	else if(((st_pedestrianDetector*)pengine)->imType == 2)
		cvCvtColor(&IplImage(((st_pedestrianDetector*)pengine)->image2),&IplImage(((st_pedestrianDetector*)pengine)->image2),CV_YUV2BGR);

	vector<stDetection> vecDetectionResult, vecDetectionResult_temp;
	//Test
	if(((st_pedestrianDetector*)pengine)->param.nSensitivity > 0 & nCandidate == 0) {		
		vecDetectionResult_temp = ((st_pedestrianDetector*)pengine)->pedestrianDetector.Run(&(((st_pedestrianDetector*)pengine)->image), 0, 0, ((st_pedestrianDetector*)pengine)->param.params);

		for( int i = 0 ; i < (int) vecDetectionResult_temp.size(); i++) {
			if(vecDetectionResult_temp[i].score >((st_pedestrianDetector*)pengine)->param.nSensitivity) {
				vecDetectionResult.push_back(vecDetectionResult_temp[i]);
			}
		}

		int kk = 1;
		//최경택 수정 Memory Allocation하는 부분 주의
		*ppDetectionResult = (int*)malloc(sizeof(int)*(vecDetectionResult.size()*6 + 1));
		for( int i = 0 ; i < (int) vecDetectionResult.size(); i++) {
			ndetected++;
			(*ppDetectionResult)[kk++] = 1;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].score;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].box.x;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].box.y;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].box.x + vecDetectionResult[i].box.w;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].box.y + vecDetectionResult[i].box.h;
		}
		(*ppDetectionResult)[0] = ndetected;
	}
	else if(((st_pedestrianDetector*)pengine)->param.nSensitivity > 0 & nCandidate != 0)
	{
		for(int k = 0 ; k < 5*nCandidate; k = k + 5) 
		{
			cv::Mat roi = ((st_pedestrianDetector*)pengine)->image(cv::Rect(pCandidateGate[k],pCandidateGate[k+1],pCandidateGate[k+2]-pCandidateGate[k]-1,pCandidateGate[k+3]-pCandidateGate[k+1]-1));
			heightRatio = modelHeight/pCandidateGate[k+4];
			h_r = roi.rows;
			w_r = roi.cols;
			cv::resize(roi, roi, cv::Size(w_r*heightRatio,h_r*heightRatio));
			//imshow("flame Image", ((st_fireDetector*)pengine)->image);
		
			vecDetectionResult_temp = ((st_pedestrianDetector*)pengine)->pedestrianDetector.Run(&roi, 0, 0, ((st_pedestrianDetector*)pengine)->param.params);
			
			for( int i = 0 ; i < (int) vecDetectionResult_temp.size(); i++) {
				if(vecDetectionResult_temp[i].score >((st_pedestrianDetector*)pengine)->param.nSensitivity) {
					ndetected++;
					vecDetectionResult_temp[i].box.x = pCandidateGate[k] + vecDetectionResult_temp[i].box.x/heightRatio;
					vecDetectionResult_temp[i].box.y = pCandidateGate[k+1] + vecDetectionResult_temp[i].box.y/heightRatio;
					vecDetectionResult_temp[i].box.w = vecDetectionResult_temp[i].box.w/heightRatio;
					vecDetectionResult_temp[i].box.h = vecDetectionResult_temp[i].box.h/heightRatio;

					vecDetectionResult.push_back(vecDetectionResult_temp[i]);
				}
			}
			vecDetectionResult_temp.clear();
		}
		int kk = 1;
		//최경택 수정 Memory Allocation하는 부분 주의
		*ppDetectionResult = (int*)malloc(sizeof(int)*(vecDetectionResult.size()*6 + 1));
		for( int i = 0 ; i < (int) vecDetectionResult.size(); i++) {
			(*ppDetectionResult)[kk++] = 1;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].score;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].box.x;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].box.y;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].box.x + vecDetectionResult[i].box.w;
			(*ppDetectionResult)[kk++] = vecDetectionResult[i].box.y + vecDetectionResult[i].box.h;
		}
	}

	if(((st_pedestrianDetector*)pengine)->param.params.bSHOW_WINDOW == 1) {
		((st_pedestrianDetector*)pengine)->pedestrianDetector.visualize(&(((st_pedestrianDetector*)pengine)->image),0,&vecDetectionResult);
	}	

	return NON_OPERATION_ERROR;
}

//최경택 수정 PedestrianDetect에서 반환한 메모리 해제하는 함수 2015-11-05
void PedestrianResultFree(int** pDetectionResult)
{
	if (*pDetectionResult)
	{
		free(*pDetectionResult);
		*pDetectionResult = 0;
	}
}


